ArtifactName,VulnerabilityID,PkgName,InstalledVersion,FixedVersion,Severity,Description
docker.io/appropriate/curl:latest,CVE-2018-0500,curl,7.59.0-r0,7.61.0-r0,CRITICAL,"Curl_smtp_escape_eob in lib/smtp.c in curl 7.54.1 to and including curl 7.60.0 has a heap-based buffer overflow that might be exploitable by an attacker who can control the data that curl transmits over SMTP with certain settings (i.e., use of a nonstandard --limit-rate argument or CURLOPT_BUFFERSIZE value)."
docker.io/appropriate/curl:latest,CVE-2018-1000300,curl,7.59.0-r0,7.60.0-r0,CRITICAL,curl version curl 7.54.1 to and including curl 7.59.0 contains a CWE-122: Heap-based Buffer Overflow vulnerability in denial of service and more that can result in curl might overflow a heap based memory buffer when closing down an FTP connection with very long server command replies.. This vulnerability appears to have been fixed in curl < 7.54.1 and curl >= 7.60.0.
docker.io/appropriate/curl:latest,CVE-2018-1000301,curl,7.59.0-r0,7.60.0-r0,CRITICAL,curl version curl 7.20.0 to and including curl 7.59.0 contains a CWE-126: Buffer Over-read vulnerability in denial of service that can result in curl can be tricked into reading data beyond the end of a heap based buffer used to store downloaded RTSP content.. This vulnerability appears to have been fixed in curl < 7.20.0 and curl >= 7.60.0.
docker.io/appropriate/curl:latest,CVE-2018-14618,curl,7.59.0-r0,7.61.1-r0,CRITICAL,"curl before version 7.61.1 is vulnerable to a buffer overrun in the NTLM authentication code. The internal function Curl_ntlm_core_mk_nt_hash multiplies the length of the password by two (SUM) to figure out how large temporary storage area to allocate from the heap. The length value is then subsequently used to iterate over the password and generate output into the allocated storage buffer. On systems with a 32 bit size_t, the math to calculate SUM triggers an integer overflow when the password length exceeds 2GB (2^31 bytes). This integer overflow usually causes a very small buffer to actually get allocated instead of the intended very huge one, making the use of that buffer end up in a heap buffer overflow. (This bug is almost identical to CVE-2017-8816.)"
docker.io/appropriate/curl:latest,CVE-2018-16839,curl,7.59.0-r0,7.61.1-r1,CRITICAL,Curl versions 7.33.0 through 7.61.1 are vulnerable to a buffer overrun in the SASL authentication code that may lead to denial of service.
docker.io/appropriate/curl:latest,CVE-2018-16840,curl,7.59.0-r0,7.61.1-r1,CRITICAL,"A heap use-after-free flaw was found in curl versions from 7.59.0 through 7.61.1 in the code related to closing an easy handle. When closing and cleaning up an 'easy' handle in the `Curl_close()` function, the library code first frees a struct (without nulling the pointer) and might then subsequently erroneously write to a struct field within that already freed struct."
docker.io/appropriate/curl:latest,CVE-2018-16842,curl,7.59.0-r0,7.61.1-r1,CRITICAL,Curl versions 7.14.1 through 7.61.1 are vulnerable to a heap-based buffer over-read in the tool_msgs.c:voutf() function that may result in information exposure and denial of service.
docker.io/appropriate/curl:latest,CVE-2019-3822,curl,7.59.0-r0,7.61.1-r2,CRITICAL,"libcurl versions from 7.36.0 to before 7.64.0 are vulnerable to a stack-based buffer overflow. The function creating an outgoing NTLM type-3 header (`lib/vauth/ntlm.c:Curl_auth_create_ntlm_type3_message()`), generates the request HTTP header contents based on previously received data. The check that exists to prevent the local buffer from getting overflowed is implemented wrongly (using unsigned math) and as such it does not prevent the overflow from happening. This output data can grow larger than the local buffer if very large 'nt response' data is extracted from a previous NTLMv2 header provided by the malicious or broken HTTP server. Such a 'large value' needs to be around 1000 bytes or more. The actual payload data copied to the target buffer comes from the NTLMv2 type-2 response header."
docker.io/appropriate/curl:latest,CVE-2019-5481,curl,7.59.0-r0,7.61.1-r3,CRITICAL,Double-free vulnerability in the FTP-kerberos code in cURL 7.52.0 to 7.65.3.
docker.io/appropriate/curl:latest,CVE-2019-5482,curl,7.59.0-r0,7.61.1-r3,CRITICAL,Heap buffer overflow in the TFTP protocol handler in cURL 7.19.4 to 7.65.3.
docker.io/appropriate/curl:latest,CVE-2018-16890,curl,7.59.0-r0,7.61.1-r2,HIGH,"libcurl versions from 7.36.0 to before 7.64.0 is vulnerable to a heap buffer out-of-bounds read. The function handling incoming NTLM type-2 messages (`lib/vauth/ntlm.c:ntlm_decode_type2_target`) does not validate incoming data correctly and is subject to an integer overflow vulnerability. Using that overflow, a malicious or broken NTLM server could trick libcurl to accept a bad length + offset combination that would lead to a buffer read out-of-bounds."
docker.io/appropriate/curl:latest,CVE-2019-3823,curl,7.59.0-r0,7.61.1-r2,HIGH,"libcurl versions from 7.34.0 to before 7.64.0 are vulnerable to a heap out-of-bounds read in the code handling the end-of-response for SMTP. If the buffer passed to `smtp_endofresp()` isn't NUL terminated and contains no character ending the parsed number, and `len` is set to 5, then the `strtol()` call reads beyond the allocated buffer. The read contents will not be returned to the caller."
docker.io/appropriate/curl:latest,CVE-2019-14697,musl,1.1.18-r2,1.1.18-r4,CRITICAL,"musl libc through 1.1.23 has an x87 floating-point stack adjustment imbalance, related to the math/i386/ directory. In some cases, use of this library could introduce out-of-bounds writes that are not present in an application's source code."
