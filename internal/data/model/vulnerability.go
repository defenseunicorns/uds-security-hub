package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// Vulnerability is a struct that represents a vulnerability.
type Vulnerability struct {
	CreatedAt        time.Time      `json:"CreatedAt" gorm:"autoCreateTime"`
	LastModifiedDate time.Time      `json:"LastModifiedDate" gorm:"type:timestamp"`
	PublishedDate    time.Time      `json:"PublishedDate" gorm:"type:timestamp"`
	UpdatedAt        time.Time      `json:"UpdatedAt" gorm:"autoUpdateTime"`
	CVSS             CVSS           `json:"CVSS" gorm:"type:jsonb"`
	VendorSeverity   VendorSeverity `json:"VendorSeverity" gorm:"type:jsonb"`
	DataSource       DataSource     `json:"DataSource" gorm:"foreignKey:ID,URL;references:ID,URL"`
	Layer            Layer          `json:"Layer" gorm:"embedded"`
	PkgIdentifier    PkgIdentifier  `json:"PkgIdentifier" gorm:"foreignKey:PURL,UID;references:PURL,UID"`
	Description      string         `json:"Description"`
	FixedVersion     string         `json:"FixedVersion"`
	InstalledVersion string         `json:"InstalledVersion"`
	PkgName          string         `json:"PkgName"`
	PkgPath          string         `json:"PkgPath"`
	PrimaryURL       string         `json:"PrimaryURL"`
	Severity         string         `json:"Severity"`
	SeveritySource   string         `json:"SeveritySource"`
	Status           string         `json:"Status"`
	Title            string         `json:"Title"`
	VulnerabilityID  string         `json:"VulnerabilityID"`
	Target           string         `json:"Target"`
	Class            string         `json:"Class"`
	Type             string         `json:"Type"`
	CweIDs           CweIDs         `json:"CweIDs" gorm:"type:jsonb"`
	References       References     `json:"References" gorm:"type:jsonb"`
	ScanID           uint           `json:"ScanID" gorm:"index;foreignKey:ScanID;references:ID"`
	ID               uint           `gorm:"primaryKey;autoIncrement"`
}

// CVSS is a struct that represents the CVSS score.
type CVSS map[string]CVSSData

// CVSSData is a struct that represents the CVSS data.
type CVSSData struct {
	V3Vector string  `json:"V3Vector"`
	V3Score  float64 `json:"V3Score"`
}

// Value implements the driver.Valuer interface for database serialization.
func (c CVSS) Value() (driver.Value, error) {
	bytes, err := json.Marshal(c)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CVSS: %w", err)
	}
	return bytes, nil
}

// Scan implements the sql.Scanner interface for database deserialization.
func (c *CVSS) Scan(value interface{}) error {
	bytes, ok := value.([]byte)
	if !ok {
		return fmt.Errorf("CVSS Scan error: expected []byte, got %T", value)
	}
	if err := json.Unmarshal(bytes, c); err != nil {
		return fmt.Errorf("failed to unmarshal CVSS: %w", err)
	}
	return nil
}

// CweIDs is a slice of strings that represents the CWE IDs.
type CweIDs []string

// Value implements the driver.Valuer interface for database serialization.
func (c CweIDs) Value() (driver.Value, error) {
	bytes, err := json.Marshal(c)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CweIDs: %w", err)
	}
	return bytes, nil
}

// Scan implements the sql.Scanner interface for database deserialization.
func (c *CweIDs) Scan(value interface{}) error {
	bytes, ok := value.([]byte)
	if !ok {
		return fmt.Errorf("CweIDs Scan error: expected []byte, got %T", value)
	}
	if err := json.Unmarshal(bytes, c); err != nil {
		return fmt.Errorf("failed to unmarshal CweIDs: %w", err)
	}
	return nil
}

// DataSource is a struct that represents a data source for vulnerability.
type DataSource struct {
	ID   string `json:"ID" gorm:"primaryKey"`
	Name string `json:"Name" gorm:"primaryKey"`
	URL  string `json:"URL" gorm:"primaryKey"`
}

// Value implements the driver.Valuer interface for database serialization.
func (d DataSource) Value() (driver.Value, error) {
	bytes, err := json.Marshal(d)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal DataSource: %w", err)
	}
	return bytes, nil
}

// Scan implements the sql.Scanner interface for database deserialization.
func (d *DataSource) Scan(value interface{}) error {
	bytes, ok := value.([]byte)
	if !ok {
		return errors.New("invalid type for DataSource")
	}
	if err := json.Unmarshal(bytes, d); err != nil {
		return fmt.Errorf("failed to unmarshal DataSource: %w", err)
	}
	return nil
}

// Layer is a struct that represents a layer in the image.
type Layer struct {
	Digest string `json:"Digest"`
	DiffID string `json:"DiffID"`
}

// PkgIdentifier is a struct that represents a package identifier pURL.
type PkgIdentifier struct {
	PURL string `json:"PURL" gorm:"primaryKey"`
	UID  string `json:"UID" gorm:"primaryKey"`
}

// Value implements the driver.Valuer interface for database serialization.
func (p PkgIdentifier) Value() (driver.Value, error) {
	bytes, err := json.Marshal(p)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal PkgIdentifier: %w", err)
	}
	return bytes, nil
}

// Scan implements the sql.Scanner interface for database deserialization.
func (p *PkgIdentifier) Scan(value interface{}) error {
	bytes, ok := value.([]byte)
	if !ok {
		return errors.New("invalid type for PkgIdentifier")
	}
	if err := json.Unmarshal(bytes, p); err != nil {
		return fmt.Errorf("failed to unmarshal PkgIdentifier: %w", err)
	}
	return nil
}

// References is a slice of strings that represents the references.
type References []string

func (r References) Value() (driver.Value, error) {
	bytes, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal References: %w", err)
	}
	return bytes, nil
}

// Scan implements the sql.Scanner interface for database deserialization.
func (r *References) Scan(value interface{}) error {
	bytes, ok := value.([]byte)
	if !ok {
		return errors.New("type assertion to []byte failed")
	}
	if err := json.Unmarshal(bytes, r); err != nil {
		return fmt.Errorf("failed to unmarshal References: %w", err)
	}
	return nil
}

// VendorSeverity is a struct that represents the vendor severity.
type VendorSeverity map[string]int

// Value implements the driver.Valuer interface for database serialization.
func (v VendorSeverity) Value() (driver.Value, error) {
	bytes, err := json.Marshal(v)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal VendorSeverity: %w", err)
	}
	return bytes, nil
}

// Scan implements the sql.Scanner interface for database deserialization.
func (v *VendorSeverity) Scan(value interface{}) error {
	bytes, ok := value.([]byte)
	if !ok {
		return errors.New("invalid type for VendorSeverity")
	}
	if err := json.Unmarshal(bytes, v); err != nil {
		return fmt.Errorf("failed to unmarshal VendorSeverity: %w", err)
	}
	return nil
}
