//go:build integration
// +build integration

package model

import (
	"context"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// TestVulnerabilityModel tests the Vulnerability model.
func TestVulnerabilityModel(t *testing.T) {
	db := setupPostgresDB(t)
	// Insert a package first
	packageModel := Package{
		Name:       "test-package-TestInsertScan",
		Repository: "test-repo-TestInsertScan",
		Tag:        "latest-TestInsertScan",
	}
	tx := db.WithContext(context.Background())
	if err := tx.Create(&packageModel).Error; err != nil {
		t.Fatalf("failed to insert package: %v", err)
		tx.Rollback()
	}
	defer tx.Rollback() //
	scanModel := Scan{
		PackageID: packageModel.ID,
	}
	tx = db.WithContext(context.Background())
	if err := tx.Create(&scanModel).Error; err != nil {
		t.Fatalf("failed to insert scan: %v", err)
		tx.Rollback()
	}
	// Test cases for different Vulnerability instances
	testCases := []struct {
		vulnerability *Vulnerability
	}{
		{
			vulnerability: &Vulnerability{
				VulnerabilityID:  "CVE-2021-1234",
				PkgName:          "example-package",
				PkgPath:          "/path/to/package",
				PkgIdentifier:    PkgIdentifier{PURL: "pkg:generic/example-package", UID: "123"},
				Layer:            Layer{Digest: "sha256:abcdef", DiffID: "sha256:ghijkl"},
				SeveritySource:   "NVD",
				PrimaryURL:       "https://example.com/vulnerability",
				DataSource:       DataSource{ID: "1", Name: "Example Data Source", URL: "https://example.com"},
				Title:            "Example Vulnerability",
				Description:      "This is an example vulnerability.",
				Severity:         "high",
				CweIDs:           []string{"CWE-123", "CWE-456"},
				VendorSeverity:   VendorSeverity{"alma": 2, "amazon": 2, "bitnami": 2, "cbl-mariner": 2, "ghsa": 3, "nvd": 2, "oracle-oval": 3, "photon": 2, "redhat": 2, "rocky": 2, "ubuntu": 2},
				References:       []string{"https://example.com/ref1", "https://example.com/ref2"},
				PublishedDate:    time.Now(),
				LastModifiedDate: time.Now(),
				ScanID:           scanModel.ID,
			},
		},
		{
			vulnerability: &Vulnerability{
				VulnerabilityID:  "CVE-2022-40897",
				PkgName:          "setuptools",
				PkgPath:          "leapfrogai/.venv/lib/python3.11/site-packages/setuptools-65.5.0.dist-info/METADATA",
				PkgIdentifier:    PkgIdentifier{PURL: "pkg:pypi/setuptools@65.5.0", UID: "f38ed5ba4e78b3a"},
				InstalledVersion: "65.5.0",
				FixedVersion:     "65.5.1",
				Status:           "fixed",
				Layer:            Layer{Digest: "sha256:3570400c124f5eb2e156d785c12d97dc50ece9b31f25b540afc8334a2f9930b2", DiffID: "sha256:4a7231a7d74baaafcfb89ca1760fb7c59f3b7e39c5aa0b1a31eba9c780d4653f"},
				SeveritySource:   "ghsa",
				PrimaryURL:       "https://avd.aquasec.com/nvd/cve-2022-40897",
				DataSource:       DataSource{ID: "ghsa", Name: "GitHub Security Advisory pip", URL: "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"},
				Title:            "pypa-setuptools: Regular Expression Denial of Service (ReDoS) in package_index.py",
				Description:      "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
				Severity:         "HIGH",
				CweIDs:           []string{"CWE-1333"},
				VendorSeverity:   VendorSeverity{"alma": 2},
				CVSS: map[string]CVSSData{
					"bitnami": {V3Vector: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 5.9},
					"ghsa":    {V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 7.5},
					"nvd":     {V3Vector: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 5.9},
					"redhat":  {V3Vector: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 5.9},
				},
				References:       []string{"https://access.redhat.com/errata/RHSA-2023:0952", "https://access.redhat.com/security/cve/CVE-2022-40897", "https://bugzilla.redhat.com/2158559", "https://bugzilla.redhat.com/show_bug.cgi?id=2158559", "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-40897", "https://errata.almalinux.org/9/ALSA-2023-ata.almalinux.org/9/ALSA-2023-0952.html", "https://errata.rockylinux.org/RLSA-2023:0952", "https://github.com/pypa/setuptools", "https://github.com/pypa/setuptools/blob/fe8a98e696241487ba6ac9f91faa38ade939ec5d/setuptools/package_index.py#L200", "https://github.com/pypa/setuptools/commit/43a9c9bfa6aa626ec2a22540bea28d2ca77964be", "https://github.com/pypa/setuptools/compare/v65.5.0...v65.5.1", "https://github.com/pypa/setuptools/issues/3659", "https://linux.oracle.com/cve/CVE-2022-40897.html", "https://linux.oracle.com/errata/ELSA-2023-12348.html", "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ADES3NLOE5QJKBLGNZNI2RGVOSQXA37R/", "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/YNA2BAH2ACBZ4TVJZKFLCR7L23BG5C3H/", "https://nvd.nist.gov/vuln/detail/CVE-2022-40897", "https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages", "https://pyup.io/vulnerabilities/CVE-2022-40897/52495", "https://security.netapp.com/advisory/ntap-20230214-0001", "https://setuptools.pypa.io/en/latest", "https://ubuntu.com/security/notices/USN-5817-1", "https://www.cve.org/CVERecord?id=CVE-2022-40897"},
				PublishedDate:    time.Date(2022, 12, 23, 0, 15, 13, 987000000, time.UTC),
				LastModifiedDate: time.Date(2023, 11, 7, 3, 52, 38, 44000000, time.UTC),
				ScanID:           scanModel.ID,
			},
		},
	}

	for _, tc := range testCases {
		// Save the Vulnerability to the database
		result := db.Create(tc.vulnerability)
		if result.Error != nil {
			t.Fatalf("failed to save Vulnerability: %v", result.Error)
		}

		// Retrieve the saved Vulnerability from the database
		var retrievedVulnerability Vulnerability
		result = db.First(&retrievedVulnerability, "vulnerability_id = ?", tc.vulnerability.VulnerabilityID)
		if result.Error != nil {
			t.Fatalf("failed to retrieve Vulnerability: %v", result.Error)
		}

		if diff := cmp.Diff(tc.vulnerability, &retrievedVulnerability,
			cmpopts.IgnoreFields(Vulnerability{}, "PublishedDate", "LastModifiedDate"),
			cmpopts.EquateApproxTime(time.Second)); diff != "" {
			t.Errorf("retrieved Vulnerability differs: (-want +got)\n%s", diff)
		}
	}

	// Clean up the test database
	_ = db.Migrator().DropTable(&Vulnerability{}) //nolint:errcheck
}
func setupPostgresDB(t *testing.T) *gorm.DB {
	t.Helper() // Mark this function as a test helper

	// Set default environment variables for testing
	setDefaultEnv := func(key, value string) {
		if os.Getenv(key) == "" {
			os.Setenv(key, value)
		}
	}

	setDefaultEnv("DB_HOST", "localhost")
	setDefaultEnv("DB_USER", "test_user")
	setDefaultEnv("DB_PASSWORD", "test_password")
	setDefaultEnv("DB_NAME", "test_db")
	setDefaultEnv("DB_PORT", "5432")

	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		os.Getenv("DB_HOST"),
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"),
		os.Getenv("DB_PORT"),
	)
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		t.Fatalf("failed to connect to PostgreSQL: %v", err)
	}
	err = db.AutoMigrate(&Package{}, &Scan{}, &Vulnerability{})
	if err != nil {
		t.Fatalf("failed to auto-migrate models: %v", err)
	}
	return db
}

// setupSQLiteDB sets up a SQLite database for testing.
