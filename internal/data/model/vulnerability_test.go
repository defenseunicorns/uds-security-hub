package model

import (
	"encoding/json"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func TestVulnerabilityModel(t *testing.T) {
	db, err := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	if err != nil {
		t.Fatalf("failed to connect to test database: %v", err)
	}

	// Auto-migrate the Vulnerability model
	err = db.AutoMigrate(&Vulnerability{})
	if err != nil {
		t.Fatalf("failed to auto-migrate Vulnerability model: %v", err)
	}

	// Test cases for different Vulnerability instances
	testCases := []struct {
		vulnerability *Vulnerability
	}{
		{
			vulnerability: &Vulnerability{
				VulnerabilityID:  "CVE-2021-1234",
				PkgName:          "example-package",
				PkgPath:          "/path/to/package",
				PkgIdentifier:    PkgIdentifier{PURL: "pkg:generic/example-package", UID: "123"},
				Layer:            Layer{Digest: "sha256:abcdef", DiffID: "sha256:ghijkl"},
				SeveritySource:   "NVD",
				PrimaryURL:       "https://example.com/vulnerability",
				DataSource:       DataSource{ID: "1", Name: "Example Data Source", URL: "https://example.com"},
				Title:            "Example Vulnerability",
				Description:      "This is an example vulnerability.",
				Severity:         "high",
				CweIDs:           []string{"CWE-123", "CWE-456"},
				VendorSeverity:   VendorSeverity{"alma": 2, "amazon": 2, "bitnami": 2, "cbl-mariner": 2, "ghsa": 3, "nvd": 2, "oracle-oval": 3, "photon": 2, "redhat": 2, "rocky": 2, "ubuntu": 2},
				References:       []string{"https://example.com/ref1", "https://example.com/ref2"},
				PublishedDate:    time.Now(),
				LastModifiedDate: time.Now(),
			},
		},
		{
			vulnerability: &Vulnerability{
				VulnerabilityID:  "CVE-2022-40897",
				PkgName:          "setuptools",
				PkgPath:          "leapfrogai/.venv/lib/python3.11/site-packages/setuptools-65.5.0.dist-info/METADATA",
				PkgIdentifier:    PkgIdentifier{PURL: "pkg:pypi/setuptools@65.5.0", UID: "f38ed5ba4e78b3a"},
				InstalledVersion: "65.5.0",
				FixedVersion:     "65.5.1",
				Status:           "fixed",
				Layer:            Layer{Digest: "sha256:3570400c124f5eb2e156d785c12d97dc50ece9b31f25b540afc8334a2f9930b2", DiffID: "sha256:4a7231a7d74baaafcfb89ca1760fb7c59f3b7e39c5aa0b1a31eba9c780d4653f"},
				SeveritySource:   "ghsa",
				PrimaryURL:       "https://avd.aquasec.com/nvd/cve-2022-40897",
				DataSource:       DataSource{ID: "ghsa", Name: "GitHub Security Advisory pip", URL: "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"},
				Title:            "pypa-setuptools: Regular Expression Denial of Service (ReDoS) in package_index.py",
				Description:      "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
				Severity:         "HIGH",
				CweIDs:           []string{"CWE-1333"},
				VendorSeverity:   VendorSeverity{"alma": 2},
				CVSS: map[string]CVSSData{
					"bitnami": {V3Vector: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 5.9},
					"ghsa":    {V3Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 7.5},
					"nvd":     {V3Vector: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 5.9},
					"redhat":  {V3Vector: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", V3Score: 5.9},
				},
				References:       []string{"https://access.redhat.com/errata/RHSA-2023:0952", "https://access.redhat.com/security/cve/CVE-2022-40897", "https://bugzilla.redhat.com/2158559", "https://bugzilla.redhat.com/show_bug.cgi?id=2158559", "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-40897", "https://errata.almalinux.org/9/ALSA-2023-ata.almalinux.org/9/ALSA-2023-0952.html", "https://errata.rockylinux.org/RLSA-2023:0952", "https://github.com/pypa/setuptools", "https://github.com/pypa/setuptools/blob/fe8a98e696241487ba6ac9f91faa38ade939ec5d/setuptools/package_index.py#L200", "https://github.com/pypa/setuptools/commit/43a9c9bfa6aa626ec2a22540bea28d2ca77964be", "https://github.com/pypa/setuptools/compare/v65.5.0...v65.5.1", "https://github.com/pypa/setuptools/issues/3659", "https://linux.oracle.com/cve/CVE-2022-40897.html", "https://linux.oracle.com/errata/ELSA-2023-12348.html", "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ADES3NLOE5QJKBLGNZNI2RGVOSQXA37R/", "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/YNA2BAH2ACBZ4TVJZKFLCR7L23BG5C3H/", "https://nvd.nist.gov/vuln/detail/CVE-2022-40897", "https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages", "https://pyup.io/vulnerabilities/CVE-2022-40897/52495", "https://security.netapp.com/advisory/ntap-20230214-0001", "https://setuptools.pypa.io/en/latest", "https://ubuntu.com/security/notices/USN-5817-1", "https://www.cve.org/CVERecord?id=CVE-2022-40897"},
				PublishedDate:    time.Date(2022, 12, 23, 0, 15, 13, 987000000, time.UTC),
				LastModifiedDate: time.Date(2023, 11, 7, 3, 52, 38, 44000000, time.UTC),
			},
		},
	}

	for _, tc := range testCases {
		// Save the Vulnerability to the database
		result := db.Create(tc.vulnerability)
		if result.Error != nil {
			t.Fatalf("failed to save Vulnerability: %v", result.Error)
		}

		// Retrieve the saved Vulnerability from the database
		var retrievedVulnerability Vulnerability
		result = db.First(&retrievedVulnerability, "vulnerability_id = ?", tc.vulnerability.VulnerabilityID)
		if result.Error != nil {
			t.Fatalf("failed to retrieve Vulnerability: %v", result.Error)
		}

		// Compare the retrieved Vulnerability with the original instance using cmp
		if diff := cmp.Diff(tc.vulnerability, &retrievedVulnerability, cmpopts.IgnoreFields(Vulnerability{}, "PublishedDate", "LastModifiedDate")); diff != "" {
			t.Errorf("retrieved Vulnerability differs: (-want +got)\n%s", diff)
		}
	}

	// Clean up the test database
	_ = db.Migrator().DropTable(&Vulnerability{}) //nolint:errcheck
}
func TestDeserializeScan(t *testing.T) {
	data := `
{
	"SchemaVersion": 2,
	"CreatedAt": "2024-05-22T10:28:23.122428-05:00",
	"ArtifactName": "ghcr.io/defenseunicorns/leapfrogai/rag:0.3.1",
	"ArtifactType": "container_image",
	"Metadata": {
	  "OS": {
		"Family": "wolfi",
		"Name": "20230201"
	  },
	  "ImageID": "sha256:59055e0ccba886b6d06a64f695ddc15e3aec8a57462c2de52dabe442d1970941",
	  "DiffIDs": [
		"sha256:ac8ede0a141bf51ce9537d6eba70e0fba01c45acf71bf3091fb25ec4cdbb8fd3",
		"sha256:7b25155cfcf28abb246dce7b13a3e0de4303cd90b779528457d345ca64991780",
		"sha256:e17155acfffb38d6bca1b9216eb91a0615697336b779a89f6793aa712181635e",
		"sha256:4a7231a7d74baaafcfb89ca1760fb7c59f3b7e39c5aa0b1a31eba9c780d4653f",
		"sha256:3b8b7645c6c63dd81fe26ba93636770d6858206cdcd82979a327fcdf3a43e940"
	  ],
	  "RepoTags": [
		"ghcr.io/defenseunicorns/leapfrogai/rag:0.3.1"
	  ],
	  "RepoDigests": [
		"ghcr.io/defenseunicorns/leapfrogai/rag@sha256:2bef055e18c4a673c2ba2de2c652f537b2e816863dabb7bfbdfc9efdce0d436e"
	  ],
	  "ImageConfig": {
		"architecture": "amd64",
		"author": "github.com/chainguard-dev/apko",
		"created": "2024-03-12T19:16:57.059808325Z",
		"history": [
		  {
			"author": "apko",
			"created": "2023-12-04T02:15:51Z",
			"created_by": "apko",
			"comment": "This is an apko single-layer image"
		  },
		  {
			"created": "2024-03-12T19:13:04.550982179Z",
			"created_by": "WORKDIR /leapfrogai",
			"comment": "buildkit.dockerfile.v0"
		  },
		  {
			"created": "2024-03-12T19:16:28.18421732Z",
			"created_by": "ENV PATH=/leapfrogai/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
			"comment": "buildkit.dockerfile.v0",
			"empty_layer": true
		  },
		  {
			"created": "2024-03-12T19:16:28.18421732Z",
			"created_by": "COPY /leapfrogai/tokenizer-cache/ /leapfrogai/tokenizer-cache/ # buildkit",
			"comment": "buildkit.dockerfile.v0"
		  },
		  {
			"created": "2024-03-12T19:16:56.561311331Z",
			"created_by": "COPY /leapfrogai/.venv /leapfrogai/.venv # buildkit",
			"comment": "buildkit.dockerfile.v0"
		  },
		  {
			"created": "2024-03-12T19:16:57.059808325Z",
			"created_by": "COPY src/ . # buildkit",
			"comment": "buildkit.dockerfile.v0"
		  },
		  {
			"created": "2024-03-12T19:16:57.059808325Z",
			"created_by": "EXPOSE map[8000/tcp:{}]",
			"comment": "buildkit.dockerfile.v0",
			"empty_layer": true
		  },
		  {
			"created": "2024-03-12T19:16:57.059808325Z",
			"created_by": "ENTRYPOINT [\"uvicorn\" \"main:app\" \"--proxy-headers\" \"--host\" \"0.0.0.0\" \"--port\" \"8000\"]",
			"comment": "buildkit.dockerfile.v0",
			"empty_layer": true
		  }
		],
		"os": "linux",
		"rootfs": {
		  "type": "layers",
		  "diff_ids": [
			"sha256:ac8ede0a141bf51ce9537d6eba70e0fba01c45acf71bf3091fb25ec4cdbb8fd3",
			"sha256:7b25155cfcf28abb246dce7b13a3e0de4303cd90b779528457d345ca64991780",
			"sha256:e17155acfffb38d6bca1b9216eb91a0615697336b779a89f6793aa712181635e",
			"sha256:4a7231a7d74baaafcfb89ca1760fb7c59f3b7e39c5aa0b1a31eba9c780d4653f",
			"sha256:3b8b7645c6c63dd81fe26ba93636770d6858206cdcd82979a327fcdf3a43e940"
		  ]
		},
		"config": {
		  "Entrypoint": [
			"uvicorn",
			"main:app",
			"--proxy-headers",
			"--host",
			"0.0.0.0",
			"--port",
			"8000"
		  ],
		  "Env": [
			"PATH=/leapfrogai/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
			"SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt"
		  ],
		  "User": "65532",
		  "WorkingDir": "/leapfrogai",
		  "ExposedPorts": {
			"8000/tcp": {}
		  }
		}
	  }
	}
}
`

	var scan Scan
	err := json.Unmarshal([]byte(data), &scan)
	if err != nil {
		t.Fatalf("Failed to unmarshal: %v", err)
	}
	// Define expected values for comparison
	expectedOS := OS{Family: "wolfi", Name: "20230201"}
	expectedRootFS := RootFS{Type: "layers", DiffIDs: []string{
		"sha256:ac8ede0a141bf51ce9537d6eba70e0fba01c45acf71bf3091fb25ec4cdbb8fd3",
		"sha256:7b25155cfcf28abb246dce7b13a3e0de4303cd90b779528457d345ca64991780",
		"sha256:e17155acfffb38d6bca1b9216eb91a0615697336b779a89f6793aa712181635e",
		"sha256:4a7231a7d74baaafcfb89ca1760fb7c59f3b7e39c5aa0b1a31eba9c780d4653f",
		"sha256:3b8b7645c6c63dd81fe26ba93636770d6858206cdcd82979a327fcdf3a43e940",
	}}

	// Compare OS and RootFS from the deserialized scan struct
	if diff := cmp.Diff(expectedOS, scan.Metadata.OS); diff != "" {
		t.Errorf("Mismatch in OS: %s", diff)
	}
	if diff := cmp.Diff(expectedRootFS, scan.Metadata.ImageConfig.RootFS); diff != "" {
		t.Errorf("Mismatch in RootFS: %s", diff)
	}
}

func TestDeserializeVulnerability(t *testing.T) {
	t.Skipf("skipping")
	data := `
    {
        "Target": "ghcr.io/defenseunicorns/leapfrogai/rag:0.3.1 (wolfi 20230201)",
        "Class": "os-pkgs",
        "Type": "wolfi",
        "Vulnerabilities": [
            {
                "VulnerabilityID": "CVE-2023-6246",
                "PkgID": "glibc@2.38-r6",
                "PkgName": "glibc",
                "PkgIdentifier": {
                    "PURL": "pkg:wolfi/glibc@2.38-r6?arch=x86_64",
                    "UID": "f4c42bae162f071c"
                },
                "InstalledVersion": "2.38-r6",
                "FixedVersion": "2.38-r11"
            }
        ]
    }`

	var vulnerabilities []Vulnerability
	err := json.Unmarshal([]byte(data), &vulnerabilities)
	if err != nil {
		t.Fatalf("Failed to unmarshal: %v", err)
	}

	// Optionally, add assertions or further processing here
}
